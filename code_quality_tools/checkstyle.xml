<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
"-//Puppy Crawl//DTD Check Configuration 1.2//EN"
"http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
<module name="Checker">
  <property name="charset" value="UTF-8"/>

  <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
  <module name="NewlineAtEndOfFile"/>

  <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
  <module name="Translation"/>

  <!-- See http://checkstyle.sf.net/config_sizes.html -->
  <module name="FileLength"/>

  <!-- See http://checkstyle.sf.net/config_whitespace.html -->
  <module name="FileTabCharacter"/>

  <module name="SuppressWarningsFilter"/>

  <module name="TreeWalker">
    <!-- See http://checkstyle.sf.net/config_naming.html -->
    <module name="ConstantName"/>
    <module name="LocalFinalVariableName"/>
    <module name="LocalVariableName"/>
    <module name="MemberName"/>
    <module name="MethodName"/>
    <module name="PackageName"/>
    <module name="ParameterName"/>
    <module name="StaticVariableName"/>
    <module name="TypeName"/>
    <module name="SuppressWarningsHolder"/>

    <!-- See http://checkstyle.sf.net/config_import.html -->
    <module name="AvoidStarImport"/>
    <module name="IllegalImport"/>
    <module name="RedundantImport"/>
    <module name="UnusedImports"/>

    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="EmptyLineSeparator">
      <property name="allowMultipleEmptyLines" value="false"/>
      <property name="tokens" value="PACKAGE_DEF, IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF, STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF"/>
    </module>
    <module name="SingleSpaceSeparator"/>
    <module name="EmptyForIteratorPad"/>
    <module name="WhitespaceAfter"/>
    <module name="WhitespaceAround"/>
    <module name="EmptyForInitializerPad"/>
    <module name="GenericWhitespace"/>
    <module name="MethodParamPad"/>
    <module name="OperatorWrap"/>
    <module name="ParenPad"/>
    <module name="TypecastParenPad"/>
    <module name="NoLineWrap"/>

    <!-- See http://checkstyle.sf.net/config_modifiers.html -->
    <module name="ModifierOrder"/>
    <module name="RedundantModifier"/>

    <!-- See http://checkstyle.sf.net/config_blocks.html -->
    <module name="AvoidNestedBlocks"/>
    <module name="EmptyBlock"/>
    <module name="LeftCurly"/>
    <module name="NeedBraces"/>
    <module name="RightCurly"/>
    <module name="EmptyCatchBlock"/>

    <!-- See http://checkstyle.sf.net/config_coding.html -->
    <module name="FinalLocalVariable"/>
    <module name="EmptyStatement"/>
    <module name="DefaultComesLast"/>
    <module name="EqualsHashCode"/>
    <module name="CovariantEquals"/>
    <module name="EqualsAvoidNull"/>
    <module name="IllegalToken"/>
    <module name="IllegalTokenText"/>
    <module name="MultipleStringLiterals">
      <property name="allowedDuplicates" value="2"/>
    </module>
    <module name="IllegalType"/>
    <module name="MultipleVariableDeclarations"/>
    <module name="OverloadMethodsDeclarationOrder"/>
    <module name="ParameterAssignment"/>
    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn"/>
    <module name="NestedForDepth">
      <property name="max" value="2"/>
    </module>
    <module name="NestedIfDepth">
      <property name="max" value="2"/>
    </module>
    <module name="NestedTryDepth"/>
    <module name="VariableDeclarationUsageDistance">
      <property name="allowedDistance" value="1"/>
    </module>
    <module name="RequireThis">
      <property name="validateOnlyOverlapping" value="true"/>
    </module>
    <module name="IllegalInstantiation"/>
    <module name="InnerAssignment"/>
    <module name="MagicNumber">
      <property name="ignoreNumbers" value="-1, 0, 0.5, 1, 2, 300"/>
      <property name="ignoreHashCodeMethod" value="true"/>
    </module>
    <module name="HiddenField">
      <property name="ignoreConstructorParameter" value="true"/>
      <property name="ignoreSetter" value="true"/>
    </module>
    <module name="OneStatementPerLine"/>
    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn"/>
    <module name="StringLiteralEquality"/>
    <module name="NoClone"/>
    <module name="NoFinalizer"/>
    <module name="UnnecessaryParentheses"/>

    <!-- See http://checkstyle.sf.net/config_design.html -->
    <module name="FinalClass"/>
    <module name="HideUtilityClassConstructor"/>
    <module name="InterfaceIsType"/>
    <module name="InnerTypeLast"/>
    <module name="ExplicitInitialization"/>
    <module name="OneTopLevelClass"/>
    <module name="MissingSwitchDefault"/>
    <module name="VisibilityModifier">
      <property name="packageAllowed" value="true"/>
      <property name="protectedAllowed" value="true"/>
      <property name="publicMemberPattern" value="^[\w]*$"/>
    </module>

    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <module name="ArrayTypeStyle"/>
    <module name="FinalParameters"/>
    <module name="OuterTypeFilename"/>
    <module name="TodoComment"/>
    <module name="UpperEll"/>
    <module name="Indentation">
      <property name="basicOffset" value="2"/>
      <property name="caseIndent" value="2"/>
      <property name="throwsIndent" value="2"/>
      <property name="arrayInitIndent" value="2"/>
      <property name="lineWrappingIndentation" value="2"/>
    </module>

    <!-- http://checkstyle.sourceforge.net/config_annotation.html -->
    <module name="MissingDeprecated"/>
    <module name="MissingOverride"/>
    <module name="AnnotationUseStyle"/>
    <module name="AnnotationLocation">
      <property name="allowSamelineMultipleAnnotations" value="true"/>
      <property name="allowSamelineSingleParameterlessAnnotation" value="true"/>
      <property name="allowSamelineParameterizedAnnotation" value="false"/>
    </module>
    <module name="AnnotationOnSameLine"/>

    <module name="RegexpSinglelineJava">
      <property name="format" value="(final)?\s*[\w]+ a[A-Z]{1}[\w]+"/>
      <property name="message" value="aVariable notation is deprecated and should be variable instead"/>
    </module>

    <module name="RegexpSinglelineJava">
      <property name="format" value="(final)?\s*[\w]+ an[A-Z]{1}[\w]+"/>
      <property name="message" value="anAwfulVariable notation is deprecated and should be variable instead"/>
    </module>

    <module name="RegexpSinglelineJava">
      <property name="format" value="[^\w][\d]+\.f"/>
      <property name="message" value="Floats should be displayed as 3f instead of 3.f"/>
    </module>

    <module name="RegexpSinglelineJava">
      <property name="format" value="[^\w][\d]+\.d"/>
      <property name="message" value="Doubles should be displayed as 3d instead of 3.d"/>
    </module>

    <module name="RegexpSinglelineJava">
      <property name="format" value="(final)?\s*[\w]+ p[A-Z]{1}[\w]+"/>
      <property name="message" value="pVariable notation is deprecated"/>
    </module>

    <module name="RegexpSinglelineJava">
      <property name="format" value="this\.m[A-Z]"/>
      <property name="message" value="this.mNotation notation should not be used"/>
    </module>

    <module name="RegexpSinglelineJava">
      <property name="format" value='[\w]+.equals\(""\)'/>
      <property name="message" value='To reduce the chance of a NPE use "".equals(var)'/>
    </module>

    <module name="RegexpSinglelineJava">
      <property name="format" value="[\w]+.equals\(''\)"/>
      <property name="message" value="To reduce the chance of a NPE use ''.equals(var)"/>
    </module>

    <module name="RegexpSinglelineJava">
      <property name="format" value="import static org\.junit\.Assert\.assertEquals;"/>
      <property name="message" value="Don't use JUnits assertEquals, AssertJ is prefered: assertThat(foo).isEqualTo();"/>
    </module>

    <module name="RegexpSinglelineJava">
      <property name="format" value="import static org\.junit\.Assert\.assertNotEquals;"/>
      <property name="message" value="Don't use JUnits assertNotEquals, AssertJ is prefered: assertThat(foo).isNotEqualTo();"/>
    </module>

    <module name="RegexpSinglelineJava">
      <property name="format" value="import static org\.junit\.Assert\.assertSame;"/>
      <property name="message" value="Don't use JUnits assertSame, AssertJ is prefered: assertThat(foo).isSameAs();"/>
    </module>

    <module name="RegexpSinglelineJava">
      <property name="format" value="import static org\.junit\.Assert\.assertNull;"/>
      <property name="message" value="Don't use JUnits assertNull, AssertJ is prefered: assertThat(foo).isNull()"/>
    </module>

    <module name="RegexpSinglelineJava">
      <property name="format" value="import static org\.junit\.Assert\.assertNotNull;"/>
      <property name="message" value="Don't use JUnits assertNotNull, AssertJ is prefered: assertThat(foo).isNotNull()"/>
    </module>

    <module name="RegexpSinglelineJava">
      <property name="format" value="import static org\.junit\.Assert\.assertNotNull;"/>
      <property name="message" value="Don't use JUnits assertNotNull, AssertJ is prefered: assertThat(foo).isNotNull()"/>
    </module>

    <module name="IllegalImport">
      <property name="illegalPkgs" value="org.jetbrains.annotations"/>
    </module>
  </module>

  <module name="RegexpSingleline">
    <property name="format" value="\s+$"/>
    <property name="message" value="Line has trailing spaces."/>
  </module>

  <module name="RegexpSingleline">
    <property name="format" value="^\s*(for|if|while)(|\s{2,})\("/>
    <property name="message" value="Space needed before opening parenthesis."/>
  </module>

  <module name="RegexpSingleline">
    <property name="format" value="^\s*for \(.*?([^ ]:|:[^ ])"/>
    <property name="message" value="Space needed around ':' character."/>
  </module>

  <module name="RegexpMultiline">
    <property name="message" value="Blank line at start of block should be removed"/>
    <property name="format" value="(?&lt;=(?&lt;!^beans )\{\s{0,99}$)^$"/>
    <property name="fileExtensions" value="groovy,java"/>
  </module>

  <module name="RegexpMultiline">
    <property name="message" value="Blank line at end of block should be removed"/>
    <property name="format" value="(?&lt;!\{\s{0,99}$)^$(?=^\s{0,99}\})"/>
    <property name="fileExtensions" value="groovy,java"/>
  </module>

  <module name="RegexpMultiline">
    <property name="message" value="Blank line before start of block should be removed"/>
    <property name="format" value="(?&lt;=[!-:&lt;-~] {0,48}?\r\n {0,48}?)\r\n *(\{|else)"/>
    <property name="fileExtensions" value="groovy,java"/>
  </module>

  <module name="RegexpMultiline">
    <property name="message" value="Extra blank line(s) should be removed"/>
    <property name="format" value="^(?:(?:\r\n){2,}|\r\n$)"/>
    <property name="fileExtensions" value="groovy,html,htm,java,jj,jjt,vm,xml,xsl"/>
  </module>

  <module name="SuppressionFilter">
    <property name="file" value="code_quality_tools/checkstyle_suppressions.xml"/>
  </module>
</module>